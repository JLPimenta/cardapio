// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @unique @default(uuid())

  name     String  @unique
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Product[]

  @@map("categories")
}

model Ingredient {
  id       String  @unique @default(uuid())
  name     String
  urlImage String?

  Products IngredientsOnProducts[]

  @@map("ingredients")
}

model IngredientsOnProducts {
  Ingredients  Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([productId, ingredientId])
  @@map("ingredientsOnProducts")
}

model Product {
  id String @unique @default(uuid())

  name        String
  price       Decimal
  urlImage    String?
  description String?
  isActive    Boolean @default(true)

  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Orders      Order[]
  Ingredients IngredientsOnProducts[]

  @@map("products")
}

model Client {
  id String @unique @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table  ClientsOnTables?
  Orders Order[]

  @@map("clients")
}

model Table {
  id String @unique @default(uuid())

  number   String  @unique
  token    String  @unique
  amount   Float?
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Clients ClientsOnTables[]
  Orders  Order[]

  @@map("tables")
}

model ClientsOnTables {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table   Table  @relation(fields: [tableId], references: [id])
  tableId String

  Client   Client @relation(fields: [clientId], references: [id])
  clientId String @unique

  @@id([tableId, clientId])
  @@map("clientsOnTables")
}

model Order {
  id String @unique @default(uuid())

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table   Table?  @relation(fields: [tableId], references: [id])
  tableId String?

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  Client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  @@map("orders")
}

model Team {
  id String @unique @default(uuid())

  name     String
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}
