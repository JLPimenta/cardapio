// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id String @unique @default(uuid())

  name     String  @unique
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Product[]

  @@map("categories")
}

model Ingredient {
  id       String  @unique @default(uuid())
  name     String  @unique
  urlImage String?

  Products IngredientsOnProducts[]

  @@map("ingredients")
}

model IngredientsOnProducts {
  quantity     Int        @default(1)
  Ingredients  Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([productId, ingredientId])
  @@map("ingredientsOnProducts")
}

model Product {
  id String @unique @default(uuid())

  name        String  @unique
  price       Decimal @db.Money()
  urlImage    String?
  description String?
  isActive    Boolean @default(true)

  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Orders      Order[]
  Ingredients IngredientsOnProducts[]

  @@map("products")
}

model Client {
  id String @unique @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table  ClientsOnTables[]
  Orders Order[]

  @@map("clients")
}

model Table {
  id          String  @unique @default(uuid())
  number      String  @unique
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  TableAccount TableAccount[]

  @@map("tables")
}

model TableAccount {
  id String @unique @default(uuid())

  title             String
  totalTableAccount Decimal   @db.Money()
  openAt            DateTime  @default(now())
  closedAt          DateTime?

  Clients ClientsOnTables[]
  Orders  Order[]

  Table   Table  @relation(fields: [tableId], references: [id])
  tableId String

  @@map("tablesAccount")
}

model ClientsOnTables {
  TableAccount   TableAccount @relation(fields: [tableAccountId], references: [id])
  tableAccountId String

  Client   Client @relation(fields: [clientId], references: [id])
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tableAccountId, clientId])
  @@map("clientsOnTables")
}

model Order {
  id String @unique @default(uuid())

  productQuantity Int     @default(1)
  totalOrder      Decimal @db.Money()

  TableAccount   TableAccount @relation(fields: [tableAccountId], references: [id])
  tableAccountId String

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  Client   Client @relation(fields: [clientId], references: [id])
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Team {
  id String @unique @default(uuid())

  name     String
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}
