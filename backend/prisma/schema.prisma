// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Category {
  id String @unique @default(uuid())

  name     String  @unique
  icon     String?
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Product[]

  @@map("categories")
}

model Product {
  id String @unique @default(uuid())

  name        String  @unique
  price       Decimal @db.Decimal(10, 2)
  urlImage    String?
  description String?
  isActive    Boolean @default(true)

  Category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?

  Orders ProductsOnOrders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Client {
  id String @unique @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table  ClientsOnTables[]
  Orders Order[]

  @@map("clients")
}

model Table {
  id          String  @unique @default(uuid())
  number      String  @unique
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  TableAccount TableAccount[]

  @@map("tables")
}

model TableAccount {
  id String @unique @default(uuid())

  title             String
  totalTableAccount Decimal   @db.Decimal(10, 2)
  openAt            DateTime  @default(now())
  closedAt          DateTime?

  Clients ClientsOnTables[]
  Orders  Order[]

  Table   Table  @relation(fields: [tableId], references: [id])
  tableId String

  @@map("tablesAccount")
}

model ClientsOnTables {
  TableAccount   TableAccount @relation(fields: [tableAccountId], references: [id])
  tableAccountId String

  Client   Client @relation(fields: [clientId], references: [id])
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tableAccountId, clientId])
  @@map("clientsOnTables")
}

enum StatusOrder {
  Delivered
  inProgress
  Waiting
}

model ProductsOnOrders {
  id String @unique @default(uuid())

  quantity Int?    @default(1)
  note     String?

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("productsOnOrders")
}

model Order {
  id String @unique @default(uuid())

  totalOrder Decimal     @db.Decimal(10, 2)
  status     StatusOrder @default(Waiting)

  Products ProductsOnOrders[]

  TableAccount   TableAccount @relation(fields: [tableAccountId], references: [id])
  tableAccountId String

  Client   Client @relation(fields: [clientId], references: [id])
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Team {
  id String @unique @default(uuid())

  name     String
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teams")
}
